process EcalEgammaClusters = {

  # initialize  MessageLogger
  include "FWCore/MessageLogger/data/MessageLogger.cfi"
 
  # initialize magnetic field
  include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

  # geometry (Only Ecal+Hcal geometry)
  include "Geometry/CaloEventSetup/test/data/testCaloConfiguration.cfi"

  # Calo geometry service model
  include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"

  # Calo topology service model
  include "Geometry/CaloEventSetup/data/CaloTopology.cfi"

  source = PoolSource 
  { 
    untracked vstring fileNames = {"file:reco-application-ecal-localreco.root"}
    untracked int32 maxEvents = -1
  }

  # use trivial ESProducer 
  es_source = EcalTrivialConditionRetriever { }

  #------------------
  #Island clustering:
  #------------------
  # create sequence for island clustering
  include "RecoEcal/EgammaClusterProducers/data/islandClusteringSequence.cff"

  #------------------
  #Hybrid clustering:
  #------------------
  # hybrid clustering sequence
  # include "RecoEcal/EgammaClusterProducers/data/hybridClusteringSequence.cff"

  module out = PoolOutputModule 
  {
    untracked string fileName = "reco-application-ecal-egammaclusters.root"
  }
                                                 
  path p = 
  {
      islandClusteringSequence 
#   & hybridClusteringSequence 
  }

  endpath e = 
  {
    out
  }
}
