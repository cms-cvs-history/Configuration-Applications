process PROD  = {


#
# services
#
   # initialize MessageLogger
   include "FWCore/MessageLogger/data/MessageLogger.cfi"
   
   service = SimpleMemoryCheck {
     untracked int32 ignoreTotal = 1 # default is one
   } 

   service = Timing {}

   service = Tracer { untracked string indention = "$$"}	

#
# end Services
#

#
# pool Source
#


   source = PoolSource {
                  untracked vstring fileNames = {'file:mcpool.root'}
		  untracked string catalog = 'PoolFileCatalog.xml'
		  untracked int32 maxEvents = 10
		  }
#
#Geometry - global
#
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"

   es_prefer = XMLIdealGeometryESSource {}

#
# end geometry
#



#
#Magnetic Field
#
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

#
# end magnetic field
#

#
# Sim
#


#
# Geant
#
   module SimG4Object = OscarProducer
   {
      bool NonBeamEvent = false
      untracked int32 RunNumber = 1001
      untracked int32 G4EventManagerVerbosity = 0
      untracked int32 G4StackManagerVerbosity = 0
      untracked int32 G4TrackingManagerVerbosity = 0
      bool UseMagneticField = true
      # bool UseMagneticField = false
      bool OverrideUserStackingAction = true
      bool StoreRndmSeeds = false
      bool RestoreRndmSeeds = false
      string PhysicsTablesDirectory = "PhysicsTables"
      bool StorePhysicsTables = false
      bool RestorePhysicsTables = false
      #VPSet Watchers = {
      # { string type = "SimTracer"
      #   bool verbose = true }
      #}
      PSet MagneticField =
      {
         double delta = 1.
      }
      PSet Physics =
      {
         # NOTE : if you want EM Physics only,
         #        please select "SimG4Core/Physics/DummyPhysics" for type
         #        and turn ON DummyEMPhysics
         #
         string type = "SimG4Core/Physics/QGSP"
         bool DummyEMPhysics = false
         bool CutsPerRegion = true
         double DefaultCutValue = 1000.  # cuts in cm, i.e. 10m
         untracked int32 Verbosity = 0   # 1 will print cuts as they get set fdrom DD
                                         # 2 will do as 1 + will dump Geant4 table of cuts
      }
      PSet Generator =
      {
         bool ApplyPtCuts = true
         bool ApplyEtaCuts = true
         bool ApplyPhiCuts = false
         double MinPhiCut = 0.   # in degrees,
         double MaxPhiCut = 360. # internally converted to radians, (-pi,pi) range accounted for
         double MinEtaCut = -5.5
         double MaxEtaCut = 5.5
         double MinPtCut = 40.
         double MaxPtCut = 999999.
         untracked int32 Verbosity = 0
      }

      PSet RunAction = { string StopFile = "StopRun" }
      PSet EventAction =
      {
         bool CollapsePrimaryVertices = false
         string StopFile = "StopRun"
         untracked bool debug = false
      }

      PSet TrackingAction =
      {
         untracked bool DetailedTiming = false
      }
      PSet UtilityActions =
      {
               string type = "SimG4Core/UtilityAction/TrackingVerboseAction"
               untracked bool  DEBUG = false
               untracked bool  CheckForHighEtPhotons = false
               untracked int32 EventMin = 0
               untracked int32 EventMax = 0
               untracked int32 EventStep = 1
               untracked int32 TrackMin = 0
               untracked int32 TrackMax = 0
               untracked int32 TrackStep = 1
               untracked int32 VerboseLevel = 0 
      }
      PSet SteppingAction =
      {
         bool   KillBeamPipe = true
         double CriticalEnergyForVacuum = 2.0
#         double CriticalDensity = 1.e-25 is crazy and makes trouble (F.R.)
         double CriticalDensity = 1.e-15
         untracked int32  Verbosity = 0
      }
      PSet TrackerSD =
      {
         bool    ZeroEnergyLoss = false
         bool    NeverAccumulate = false
         bool    PrintHits = false
         double  ElectronicSigmaInNanoSeconds = 12.06
         double  EnergyThresholdForPersistencyInGeV = 0.5
         double  EnergyThresholdForHistoryInGeV = 0.05
      }
      PSet MuonSD =
      {
         double  EnergyThresholdForPersistency = 1.0
         bool    AllMuonsPersistent = false
         bool    PrintHits = false
      }

      PSet CaloSD = {
         double EminTrack = 1.0
         untracked int32  CheckHits = 25
         untracked bool   UseMap = true
         #int32  Verbosity = 1
         untracked int32 Verbosity = 0
         untracked bool   DetailedTiming = false
      }
      PSet ECalSD = {
         bool   UseBirkLaw = false
         double BirkC1 = 0.013
         double BirkC2 = 9.6e-6
         #int32  Verbosity = 11
         int32 Verbosity = 0
      }
      PSet HCalSD = {
         bool   UseBirkLaw = false
         double BirkC1 = 0.013
         double BirkC2 = 9.6e-6
         #int32  Verbosity = 111
         int32 Verbosity = 0
         bool   UseShowerLibrary = true
         bool   TestNumberingScheme = false
      }
      PSet CaloTrkProcessing = {
         #int32  Verbosity = 1
         int32 Verbosity = 0
         bool   TestBeam  = false
         double EminTrack = 0.01
      }
      PSet HFShower =    {
         #int32  Verbosity = 11
         int32 Verbosity = 0
         double ProbMax   = 0.7268
         double CFibre    = 0.50
      }
      PSet HFShowerLibrary = {
         FileInPath FileName = "SimG4CMS/Calo/data/hfshowerlibrary_lhep.root"
         string TreeEMID  = "h3"
         string TreeHadID = "h8"
      }
      PSet HFCherenkov = {
         #int32  Verbosity       = 1
         int32 Verbosity = 0
         double RefIndex        = 1.459
         double Lambda1         = 280.0
         double Lambda2         = 700.0
         double Aperture        = 0.33
         double ApertureTrapped = 0.22
         double Gain            = 0.33
         bool   CheckSurvive    = false
      }
   } 

#
# end Geant
#


#
# Digitization with Mixing
#
   #
   #  Digitization of the Tracker
   #

   # Pixel's digitization
   #
   include "SimTracker/SiPixelDigitizer/data/PixelDigi.cfi"

   # SiStrip's digitization
   #
   include "SimTracker/SiStripDigitizer/data/SiStripDigi.cfi"

   #
   #  Digitization of Ecal and Hcal
   #

   # required for Ecal and Hcal Digitizers
   # NOTE : Both Ecal and Hcal geometries need to be present,
   #        even if only one digitizers is to run
   #

   es_module = EcalPreshowerGeometryEP {}
   es_module = EcalBarrelGeometryEP {}
   es_module = EcalEndcapGeometryEP {}
   es_module = HcalHardcodeGeometryEP {}
   es_module = CaloTowerHardcodeGeometryEP {}
   es_module = CaloGeometryBuilder {}
   es_module = CaloTowerConstituentsMapBuilder {
      untracked string MapFile="Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz"
   }
   es_module = HcalTopologyIdealEP {}
   es_module = HcalDbProducer {}
   es_source es_hardcode = HcalHardcodeCalibrations
   {
      untracked vstring toGet =
      {
         "Pedestals", "PedestalWidths",
         "Gains", "GainWidths",
         "QIEShape", "QIEData",
         "ChannelQuality", "ElectronicsMap"
      }
   }

   include "SimCalorimetry/EcalSimProducers/data/ecaldigi.cfi"
   
   include "SimCalorimetry/HcalSimProducers/data/hcaldigi.cfi"

   #
   # Muon Digitization
   #
   # this holds CSC geom service, as need for CSC digi's
   # and the digitizer itself
   #
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"
   include "SimMuon/CSCDigitizer/data/muoncscdigi.cfi"

   # Muon DT digi's

   # this holds geom.service as needed by DT digi's
   # and the digitizer itself
   #
   include "Geometry/DTGeometry/data/dtGeometry.cfi"
   include "SimMuon/DTDigitizer/data/muondtdigi.cfi"
   #
   # Muon RPC digi
   include "Geometry/RPCGeometry/data/rpcGeometry.cfi"
   include "SimMuon/RPCDigitizer/data/muonrpcdigi.cfi"          


   #
   # Mixing Module is *required* to simulated Ecal/Hcal/Muon digitization !
   #

   module mix = MixingModule
   {
#      secsource input = PoolRASource
#      {
         #
         # starting 050, you can skip secsource block at all if you don't
         # wnat to model mixing/pileup at all;
         # however, an at least "empty mixing" need to be present if you
         # want to perform Ecal/Hcal/CSC/DT digitization - those explicitely
         # require presence of CrossingFrame in the edm::Event
         #
         # alternatively, you can set averageNumber=0 if you don't want
         # to model the pileup
         #
         # to the secsource/PoolRASource, you can give just 1 file or more;
         # this files will make a "concatinated buffer", which will go circular
         # until the loop of primary events is done - thus, it'll never run out
         #
         # WARNING: you can only give miltiple files, if they're generated with
         #          identical sets of tracked parameters;
         #          for example, you canNOT give a file made with a single muon
         #          gun and a file made with a single pion gun, because PartID
         #          is a *tracked* parameter in the gun's PSet;
         #          however, you can merge together files made with other generators,
         #          for example, PythiaSource, because all parameters of it would be
         #          *untracked*
         #
#         untracked vstring fileNames =
#         {'file:/afs/cern.ch/cms/geant4rep/genntpl/muon_simhit_for_pileup.060pre1.root' }
#         untracked vstring fileNames =
#         {'file:simevent.root' }
#         string type = "poisson"
#         double averageNumber = 3  # setting this param. to 0 means "No pile-up",
                                   # that is, digitize current crossing only
#         int32 minBunch = -3
#         int32 maxBunch = 5
#         int32 seed = 1234567
#      }
      int32 bunchspace = 25
   }


#
# Digitization end
#

#
# Particle Data Table
#

  # include "SimGeneral/HepPDTESSource/data/pdt.cfi"
   es_source = HepPDTESSource {
     string pdtFileName = "/afs/cern.ch/cms/external/lcg/external/HepPDT/2.02.02/slc3_ia32_gcc323/data/PDG_mass_width_2004.mc"
   } 

# this one makes candidates from generator partigles
   module genCandidates = HepMCCandidateProducer {
# pick right source - different for different generators
   	string src = "source"
   	# string src = "FlatRandomPtGunSource"
        untracked bool verbose = false
        bool stableOnly = true
    	# vstring excludeList = { "nu(e)0", "nu(mu)0", "nu(tau)0", "mu-", "K(L)0", "n0" }
    	vstring excludeList = { }
  }

#
# end particle data table
#

#
# end of Sim
#

#
# Reco
#

#
# Calorimetry Local Reco
#

###################################################################
 # Get hardcoded conditions the same used for standard digitization
  es_source = EcalTrivialConditionRetriever {
       #untracked double adcToGeVEBConstant = 0.0286
      untracked double adcToGeVEBConstant = 0.0636
  }
 ###################################################################


 #######################################################################################	
 # EB+EE uncalibrated RecHit producer 
 # Weight method (CMS standard requires tuned weights) 	
 include "RecoLocalCalo/EcalRecProducers/data/EcalWeightUncalibratedRecHitProducer.cfi"	
 # Analytic fit (much slower does not require weights) 	
 # include "RecoLocalCalo/EcalRecProducers/data/EcalAnalFitUncalibratedRecHitProducer.cfi"	
 #######################################################################################

 #######################################################################################
 # EB+EE RecHit producer (from uncalibrated RecHit)
 include "RecoLocalCalo/EcalRecProducers/data/EcalRecHitProducer.cfi"	
 #######################################################################################

 #######################################################################################
## ES RecHit producer (from Digis)
# include "RecoLocalCalo/EcalRecProducers/data/ESRecHitProducer.cfi"	
 #######################################################################################


   # HBHE rechit producer
   module recohbhe = HcalSimpleReconstructor {
          int32 firstSample = 4
          int32 samplesToAdd = 4
          string Subdetector = 'HBHE'
          string digiLabel = 'hcaldigi'
          bool correctForTimeslew = true
   }

   # HO rechit producer
   module recoho = HcalSimpleReconstructor {
          int32 firstSample = 4
          int32 samplesToAdd = 4
          string Subdetector = 'HO'
          string digiLabel = 'hcaldigi'
          bool correctForTimeslew = true
   }

   # HF rechit producer
   module recohf = HcalSimpleReconstructor {
          int32 firstSample = 2
          int32 samplesToAdd = 2
          string Subdetector = 'HF'
          string digiLabel = 'hcaldigi'
          bool correctForTimeslew = true
   }


#
# Calotowers
#
   module towermaker = CaloTowersCreator {
      double HBThreshold = 0.9     // GeV, Scheme B
      double HOThreshold = 1.1     // GeV, Scheme B
      double HESThreshold = 1.4    // GeV, Scheme B
      double HEDThreshold = 1.4    // GeV, Scheme B
      double HF1Threshold = 0.5    // GeV, ORCA value
      double HF2Threshold = 0.5    // GeV, ORCA value
      double EBThreshold = 0.09    // GeV, ORCA value w/o selective readout
      double EEThreshold = 0.45    // GeV, ORCA value w/o selective readout
      
      double EBSumThreshold = 0.2  // GeV, Scheme B
      double EESumThreshold = 0.45 // GeV, Scheme B
      double HcalThreshold = -1000 // GeV, -1000 means cut not used 
      double EcutTower = -1000     // GeV, -1000 means cut not used
      double EBWeight = 1.0
      double EEWeight = 1.0
      double HBWeight = 1.0
      double HESWeight = 1.0
      double HEDWeight = 1.0
      double HOWeight = 1.0
      double HF1Weight = 1.0
      double HF2Weight = 1.0
      bool UseHO = true
      string hbheInput = "recohbhe"
      string hoInput = "recoho"
      string hfInput = "recohf"
      vstring ecalInputs = {"ecalrechit/EcalRecHitsEB" }
      untracked bool AllowMissingInputs = true
   }
  

#
# Tracker Local Reco
#

# Clusters and RecHits

  include "RecoLocalTracker/SiPixelClusterizer/data/SiPixelClusterizer.cfi"

  # include SiStripClusterizer
  include "RecoLocalTracker/SiStripClusterizer/data/SiStripClusterizer.cfi""


  # strip parameter estimator service for SiStripRecHitConverter
  include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"
   include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitMatcher.cfi"


  #include pixRecHitConverter
  include "RecoLocalTracker/SiPixelRecHits/data/SiPixelRecHits.cfi" 

  # include SiStripRecHitConverter
  include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitConverter.cfi"


#
# Muon Reco
#
   include "RecoLocalMuon/RPCRecHit/data/RPCRecHit.cfi"
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"
   include "Geometry/RPCGeometry/data/rpcGeometry.cfi"

## CSCRecHit producer
   include "RecoLocalMuon/CSCRecHit/data/CSCRecHit2DProducer.cfi"

## CSCSegment producer
   include "RecoLocalMuon/CSCSegment/data/CSCSegmentProducer.cfi"

   include "Geometry/DTGeometry/data/dtGeometry.cfi"

   ## _Vdrift1D_ ##
   include "RecoLocalMuon/DTRecHit/data/DTRecHit1DProducer_ParamDrift.cfi"

   ## _Vdrift2D_ ##
   include "RecoLocalMuon/DTSegment/data/DTSegment2DProducer_CombPatternReco2D_ParamDrift.cfi"

   ## _4DAlgo ##
   include "RecoLocalMuon/DTSegment/data/DTSegment4DProducer_CombPatternReco4D_ParamDrift.cfi"

   #
   # RPC
   #

   include "RecoLocalMuon/RPCRecHit/data/RPCRecHit.cfi"
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"
   include "Geometry/RPCGeometry/data/rpcGeometry.cfi"


#
# Global Reco
#


#-------------------
# MET reconstruction
#-------------------

  module calomet = METProducer {
         string src = "caloTowers"
        }

  module calometgen = METProducer {
         string src = "genCandidates"
        }



#-------------------
# Jet reconstruction
#-------------------

# this one makes candidates from CaloTowers
   module caloTowers = CaloTowerCandidateCreator {
          string src = "towermaker"
          double minimumEt = -1
          double minimumE = -1
   }
             
   module mcone5 =  MidpointJetProducer {
          untracked int32 debugLevel = 1
          double seedThreshold = 1.0
          double towerThreshold = 0.5
          double coneAreaFraction = 1.0
          int32 maxPairSize = 2
          int32 maxIterations = 100
          double overlapThreshold = .75
          double coneRadius = 0.5
          string src = "caloTowers"
          untracked string jetType = "CaloJet"
   }

   module mcone7 =  MidpointJetProducer {
          untracked int32 debugLevel = 1
          double seedThreshold = 1.0
          double towerThreshold = 0.5
          double coneAreaFraction = 1.0
          int32 maxPairSize = 2
          int32 maxIterations = 100
          double overlapThreshold = .75
          double coneRadius = 0.7
          string src = "caloTowers"
          untracked string jetType = "CaloJet"
   }

   module ktjet =  KtJetProducer {
          int32 ktAngle = 2
          int32 ktRecom = 1
          double ktECut = 1.0
          double ktRParam = 1.0
          string src = "caloTowers"
	  untracked string jetType = "CaloJet"
         }

   module icone5 =  IterativeConeJetProducer {
          string src = "caloTowers"
          untracked int32 debugLevel = 0
          double seedThreshold = 1.0
          double towerThreshold = 0.5
          double coneRadius = 0.5
 	  untracked string jetType = "CaloJet"
        }

   # GenJet parameters same as CaloJet except particle threshold is 0 GeV Et.
   module mcone5gen =  MidpointJetProducer {
          untracked int32 debugLevel = 1
          double seedThreshold = 1.0
          double towerThreshold = 0.0
          double coneAreaFraction = 1.0
          int32 maxPairSize = 2
          int32 maxIterations = 100
          double overlapThreshold = .75
          double coneRadius = 0.5
          string src = "genCandidates"
          untracked string jetType = "GenJet"
   }

   module mcone7gen =  MidpointJetProducer {
          untracked int32 debugLevel = 1
          double seedThreshold = 1.0
          double towerThreshold = 0.0
          double coneAreaFraction = 1.0
          int32 maxPairSize = 2
          int32 maxIterations = 100
          double overlapThreshold = .75
          double coneRadius = 0.7
          string src = "genCandidates"
          untracked string jetType = "GenJet"
   }

   module ktjetgen =  KtJetProducer {
          int32 ktAngle = 2
          int32 ktRecom = 1
          double ktECut = 0.0
          double ktRParam = 1.0
          string src = "genCandidates"
          untracked string jetType = "GenJet"
         }

   module icone5gen =  IterativeConeJetProducer {
          string src = "genCandidates"
          untracked int32 debugLevel = 0
          double seedThreshold = 1.0
          double towerThreshold = 0.0
          double coneRadius = 0.5
 	  untracked string jetType = "GenJet"
        }



#
# Tracking
#

# Seeds 
  include "RecoTracker/TkSeedGenerator/data/GlobalPixelSeeds.cff"

# Ckf
  include "RecoTracker/CkfPattern/data/CkfTrackCandidates.cff"

# Final Fit
  include "RecoTracker/TrackProducer/data/CTFFinalFitWithMaterial.cff"


  # RoadSearchSeedFinder
  include "RecoTracker/RoadSearchSeedFinder/data/RoadSearchSeeds.cff"

  # RoadSearchCloudMaker
  include "RecoTracker/RoadSearchCloudMaker/data/RawRoadSearchClouds.cff"

  # RoadSearchCloudMaker
  include "RecoTracker/RoadSearchCloudCleaner/data/CleanRoadSearchClouds.cff"

  # RoadSearchTrackCandidateMaker
  include "RecoTracker/RoadSearchTrackCandidateMaker/data/RoadSearchTrackCandidates.cff"

  # RS track fit with material 
  include "RecoTracker/TrackProducer/data/RSFinalFitWithMaterial.cff"

#
# electron reconstruction
#

   #------------------
   #Island clustering:
   #------------------
   # create sequence for island clustering
   include "RecoEcal/EgammaClusterProducers/data/islandClusteringSequence.cff"                                                             

#
# end of electron reconstruction
#


#
# End of GlobalReco
#
   module DIGI-RECO = PoolOutputModule {
   untracked string fileName = 'Reco.root'
   untracked vstring outputCommands = 
     {
      "keep *"
#      "drop *_ecaldigi_*_*",
#      "drop *_SimG4Object_*_*"
      }
   } 

#
# execution path and sequences
#


   #
   sequence trDigi = { pixdigi & stripdigi }
   sequence calDigi = { ecaldigi & hcaldigi }
   sequence muonDigi = { muoncscdigi & muondtdigi &  muonrpcdigi}
   sequence doDigi = { trDigi & calDigi & muonDigi  }
   sequence doHReco  = { recohbhe, recoho, recohf }
   sequence doEReco  = { ecaluncalibrechit, ecalrechit }
   sequence ecalClustering = {islandClusteringSequence }    
   sequence doRecoJetMET = {towermaker, caloTowers, mcone5, mcone7, ktjet, icone5, calomet}
   sequence doGenJetMET = {genCandidates, mcone5gen, mcone7gen, ktjetgen, icone5gen, calometgen}
   sequence muonreco = {rpcrechitbuilder &  CSCRecHit2DProducer &  CSCSegmentProducer &  DTRecHit1DProducer &  DTSegment2DProducer &  DTSegment4DProducer}
   sequence tracker_local = {pixClust & ThreeThresholdClusterizer & pixRecHitConverter & LocalMeasurementConverter}
   sequence tracks_ckf = {GlobalPixelSeeds & CkfTrackCandidates & CTFWMaterial}
   sequence tracks_rs = {RoadSearchSeeds & RawRoadSearchClouds & CleanRoadSearchClouds & RoadSearchTrackCandidates & RSWMaterial}


#
# use this if the input root file is at the pythia level
#

#   path p1 = {  SimG4Objects, mix, doDigi, doEReco, doHReco, doGenJetMET, doRecoJetMET, tracker_local, tracks_ckf, tracks_rs, ecalClustering, muonreco}

#
# use this if the input root file has already  been processed with Geant
#
   path p1 = {  mix, doDigi, doEReco, doHReco, doGenJetMET, doRecoJetMET, tracker_local, tracks_ckf, tracks_rs, ecalClustering, muonreco}

   endpath outpath = { DIGI-RECO }
}
